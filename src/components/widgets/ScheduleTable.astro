---
type Speaker = {
  name: string;
  title?: string;
};

type Activity = {
  title: string;
  description?: string;
  speaker?: Speaker;
  timeStart: number;
  timeEnd: number;
};

type Program = Activity[];

interface Props {
  programStart?: number; // 12-Hour Format
  programEnd?: number; // 12-Hour Format
  programScheduleInterval?: number; // in Minutes
  program?: Program;
}

const {
  programStart = 1200,
  programEnd = 1700,
  programScheduleInterval = 30,
  program = [
    {
      title: 'Registration',
      timeStart: 1200,
      timeEnd: 1230,
    },
    {
      title: '1st Event',
      timeStart: 1230,
      timeEnd: 1330,
    },
    {
      title: '2nd Event',
      timeStart: 1350,
      timeEnd: 1430,
    },
    {
      title: '3rd Event',
      timeStart: 1430,
      timeEnd: 1530,
    },
    {
      title: '4th Event',
      timeStart: 1540,
      timeEnd: 1620,
    },
    {
      title: 'Closing Remarks',
      timeStart: 1645,
      timeEnd: 1655,
    },
  ],
} = Astro.props as Props;

const MINUTES_PER_ROW_SPAN = 5
const HOUR_IN_MINUTE = 60

const convertTimeToMinutes = (time: number) => Math.floor(time / 100) * HOUR_IN_MINUTE + (time % 100);
const totalProgramMinutes = convertTimeToMinutes(programEnd) - convertTimeToMinutes(programStart);
const intervalsCount = totalProgramMinutes / programScheduleInterval + 1;
const totalRows = totalProgramMinutes / MINUTES_PER_ROW_SPAN;
const intervalSpan = (totalRows / (intervalsCount - 1)); // -1 to exlude last interval

const convertTo12HourFormat = (time: number) => {
  const hour = Math.floor(time / 100);
  const minute = time % 100;
  const formattedHour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;
  const formattedMinute = minute < 10 ? `0${minute}` : minute;

  if (!(programScheduleInterval % HOUR_IN_MINUTE)) {
    return `${formattedHour}`;
  }

  return `${formattedHour}:${formattedMinute}`;
};

const generateTimeSlots = (start: number, interval: number, count: number) =>
  Array.from({ length: count }, (_, i) => {
    const totalMinutes = convertTimeToMinutes(start) + i * interval;
    const nextHour = Math.floor(totalMinutes / HOUR_IN_MINUTE);
    const nextMinute = totalMinutes % HOUR_IN_MINUTE;
    return nextHour * 100 + nextMinute;
  });

const generatedTime = generateTimeSlots(programStart, programScheduleInterval, intervalsCount);

const timeWithPostFix = generatedTime.map((time) => ({
  hour: convertTo12HourFormat(time),
  postfix: time < 1200 || time >= 2400 ? 'AM' : 'PM',
}));

const formatTime = (time: number) => {
  const hours = Math.floor(time / 100) % 12 || 12;
  const minutes = (time % 100).toString().padStart(2, '0');
  const period = time < 1200 ? 'AM' : 'PM';
  return `${hours}:${minutes} ${period}`;
};

const getActivitySpan = (activity: Activity) => {
  const startMinutes = convertTimeToMinutes(activity.timeStart);
  const endMinutes = convertTimeToMinutes(activity.timeEnd);
  const activityDuration = endMinutes - startMinutes;

  const rowSpan =  activityDuration / MINUTES_PER_ROW_SPAN
  return { rowSpan };
};
const getActivityStyle = (span: number) => `grid-row: span ${span} / span ${span}`;
const timeStyle = `grid-row: span ${intervalSpan}/ span ${intervalSpan}`;

---

<section class="flex w-full overflow-x-auto xl:basis-2/3 relative z-[1]">
  <div class="grid w-full min-w-[424px]" role="table" style="grid-template-columns: 10% 90%;">
    <div class="grid col-span-1" style={`grid-template-rows: repeat(${totalRows}, minmax(0, 1fr));`}>
      {
        timeWithPostFix.map(({ hour, postfix }) => (
          <div class="flex flex-col items-center px-2" style={timeStyle}>
            <span class="text-3xl font-black">{hour}</span>
            <span class="text-lg">{postfix}</span>
          </div>
        ))
      }
    </div>
    <div class="grid w-full col-span-1" style={`grid-template-rows: repeat(${totalRows}, minmax(0, 1fr));`}>
      {
        program.map((event) => {
          const { rowSpan } = getActivitySpan(event);
          return (
            <div
              class="flex w-full px-2 leading-[inherit] text-ellipsis !text-xs font-bold border-t border-t-white"
              style={getActivityStyle(rowSpan)}
            >
              <span class="flex items-start w-full justify-between">
                <span>
                  <h3 class="text-lg md:text-xl text-pycon-yellow font-extrabold text-wrap">{event.title}</h3>
                  {event.speaker && (
                      <p class="text-sm md:text-[14px] text-wrap">{event.speaker.name}</p>
                      <p class="text-sm md:text-[14px] text-wrap">{event.speaker.title}</p>
                  )}
                </span>
                <p class="text-pycon-yellow text-end text-nowrap md:text-lg">
                  {formatTime(event.timeStart)} - {formatTime(event.timeEnd)}
                </p>
              </span>
            </div>
          );
        })
      }
    </div>
  </div>
</section>
